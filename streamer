import argparse
import socket
import json
import can
import cantools


def parse_arguments():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description="Send UDP data from CAN network using a DBC file."
    )
    parser.add_argument("--address", default="127.0.0.1", help="UDP address")
    parser.add_argument("--port", default=9870, type=int, help="UDP port")
    parser.add_argument("--dbcfile", required=True, help="DBC file path")
    parser.add_argument("--can_channel", default="PCAN_USBBUS1", help="CAN interface name")
    parser.add_argument("--bitrate", default=500000, type=int, help="CAN bus bitrate")
    return parser.parse_args()


def load_dbc_file(dbc_file):
    """Load the DBC file."""
    try:
        return cantools.database.load_file(dbc_file)
    except Exception as e:
        raise RuntimeError(f"Error loading DBC file '{dbc_file}': {e}")


def setup_can_interface(channel, bitrate):
    """Setup the CAN interface."""
    try:
        return can.interface.Bus(channel=channel, bustype='pcan', bitrate=bitrate)
    except Exception as e:
        raise RuntimeError(f"Error setting up CAN interface on channel '{channel}': {e}")


def send_udp_from_can(sock, db, can_bus, udp_address, udp_port):
    """Listen to CAN network and send decoded messages via UDP."""
    print("Listening on the CAN network...")

    try:
        while True:
            # Receive a CAN message
            msg = can_bus.recv()

            if msg is None:
                continue

            # Decode the CAN message using the DBC file
            try:
                decoded_message = db.decode_message(msg.arbitration_id, msg.data)
            except (cantools.database.errors.DecodeError, KeyError):
                print(f"Warning: Failed to decode message with ID {msg.arbitration_id}")
                continue

            # Prepare the JSON data
            data = {
                "timestamp": msg.timestamp,
                "arbitration_id": msg.arbitration_id,
                "signals": decoded_message
            }

            json_data = json.dumps(data)

            # Send the UDP packet
            try:
                sock.sendto(json_data.encode(), (udp_address, udp_port))
            except socket.error as e:
                raise RuntimeError(f"Error sending UDP packet: {e}")

            # Print for verification
            print(f"Sent: {json_data}")

    except KeyboardInterrupt:
        print("Terminated by user")
    except Exception as e:
        raise RuntimeError(f"Error while processing CAN messages: {e}")
    finally:
        try:
            can_bus.shutdown()
        except Exception as e:
            print(f"Error shutting down CAN bus: {e}")


def main():
    """Main function to run the script."""
    try:
        args = parse_arguments()

        # Load the DBC file
        db = load_dbc_file(args.dbcfile)

        # Create the UDP socket
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        except socket.error as e:
            raise RuntimeError(f"Error creating UDP socket: {e}")

        # Setup the CAN interface
        can_bus = setup_can_interface(args.can_channel, args.bitrate)

        # Start sending CAN data over UDP
        send_udp_from_can(sock, db, can_bus, args.address, args.port)

    except Exception as e:
        print(f"Fatal error: {e}")


if __name__ == "__main__":
    main()
